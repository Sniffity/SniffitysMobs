buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: "org.spongepowered.mixin"


version = "${mod_version}-${minecraft_version}"
group = 'com.github.sniffity.sniffityscreatures'
archivesBaseName = "${mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.86'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.18:3.0.57')
    compileOnly fg.deobf("mezz.jei:jei-1.18.2-forge-api:10.2.1.283")
    runtimeOnly fg.deobf("mezz.jei:jei-1.18.2-forge:10.2.1.283")
    runtimeOnly fg.deobf("curse.maven:theoneprobe-245211:3965688")
}

repositories {
    maven {url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {url "https://cursemaven.com"}
    maven {url "https://dvs1.progwml6.com/files/maven/"}
}

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            args '--username', 'DevSniffity'
            property 'forge.enabledGameTestNamespaces', 'examplemod'
            mods {
                sniffityscreatures {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            args '--username', 'DevSniffity'
            mods {
                sniffityscreatures {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            args '--mod', 'sniffityscreatures', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                sniffityscreatures {
                    source sourceSets.main
                }
            }
        }
    }
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_id: mod_id, mod_name: mod_name, mod_version: mod_version, mod_authors: mod_authors, mod_description: mod_description,
                         minecraft_version_range: minecraft_version_range, forge_version_range: forge_version_range, loader_version_range: loader_version_range,
                         geckolib_version_range: geckolib_version_range]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}

mixin {
    add sourceSets.main, 'mixins.sniffityscreatures.refmap.json'
    config 'mixins.sniffityscreatures.json'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Sniffity's Creatures",
                "Specification-Vendor"    : "Sniffity",
                "Specification-Version"   : "1",
                "Implementation-Title"    : "sniffityscreatures",
                "Implementation-Version"  : "${mod_version}",
                "Implementation-Vendor"   : "Sniffity",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}